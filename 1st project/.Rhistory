a <- domain$new(data = d, resolution = c(0.1, 0.3, 1))
### Colors
col1 <- rgb(0, 1, 1, .4)
col2 <- rgb(1, 0, 1, .4)
col3 <- rgb(0, 0, 1, .4)
col4 <- rgb(0, 0, 1, 1)
### Closing all graphical devices
graphics.off()
### Creating a graph
a$plotDomain(resolutionIndex = 3, col = lighter(col1, 10), border = col1)
a$plotDomain(resolutionIndex = 2, col = lighter(col2, 50), border = col2)
a$plotDomain(resolutionIndex = 1, col = lighter(col3, 50), border = lighter(col3, 20))
a$plotPoints(pch = 20, size = 0.5, col = col4)
domain <- R6Class(classname = "Domain",
public = list(
data1 = NA,
resolution1 = NA,
p = NA,
nbins = NA,
w = NA,
n_bins = NA,
initialize = function(data1, resolution1){
self$data1 <- data1
self$resolution1 <- resolution1
},
lims_calc = function(){
xb <- ceiling(max(self$data1$x)) + 1
xa <- floor(min(self$data1$x)) - 1
yb <- ceiling(max(self$data1$y)) + 1
ya <- floor(min(self$data1$y)) - 1
diff_x <- xb - xa
diff_y <- yb - ya
center_x <- (xb + xa)/2
center_y <- (yb + ya)/2
xa_lim <- center_x - 1/2 * max(diff_x, diff_y)
xb_lim <- center_x + 1/2 * max(diff_x, diff_y)
ya_lim <- center_y - 1/2 * max(diff_x, diff_y)
yb_lim <- center_y + 1/2 * max(diff_x, diff_y)
self$w <- list()
self$w$x <- c(xa_lim, xb_lim)
self$w$y <- c(ya_lim, yb_lim)
self$n_bins <- 7/240 * (xb_lim - xa_lim) * (yb_lim - ya_lim) + 1.47
},
plotDomain = function(resolutionIndex, col1, border1, ...){
self$lims_calc()
if(is.null(dev.list())){
self$p <- NA
}
scale <- (1/self$resolution1[resolutionIndex])
if(length(self$p) == 1){
self$p <- ggplot(self$data1, aes(x, y)) +
scale_x_continuous(limits = self$w$x) +
scale_y_continuous(limits = self$w$y) +
coord_equal()
self$p <- self$p +
geom_hex(bins = self$n_bins * scale, col = border1, fill = col1) +
theme(panel.background = element_blank(), legend.position = "none") +
theme(panel.border = element_rect(color = "black",
fill = NA,
size = 0.5))
}else{
self$p <- self$p + geom_hex(bins = self$n_bins * scale, col = border1, fill = col1)
}
print(self$p)
return(invisible(self))
},
plotPoints = function(cex, ...){
self$lims_calc()
if(is.null(dev.list())){
self$p <- NA
}
if(length(self$p) == 1){
self$p <- ggplot(self$data1, aes(x, y)) +
scale_x_continuous(limits = self$w$x) +
scale_y_continuous(limits = self$w$y) +
coord_equal()
self$p <- self$p +
geom_point(alpha = cex, ...)  +
theme(panel.background = element_blank(), legend.position = "none") +
theme(panel.border = element_rect(color = "black",
fill = NA,
size = 0.5))
}else{
self$p <- self$p + geom_point(...)
}
print(self$p)
return(invisible(self))
}
)
)
rm(list = ls())
library(R6)
library(ggplot2)
library(readr)
domain <- R6Class(classname = "Domain",
public = list(
data1 = NA,
resolution1 = NA,
p = NA,
nbins = NA,
w = NA,
n_bins = NA,
initialize = function(data1, resolution1){
self$data1 <- data1
self$resolution1 <- resolution1
},
lims_calc = function(){
xb <- ceiling(max(self$data1$x)) + 1
xa <- floor(min(self$data1$x)) - 1
yb <- ceiling(max(self$data1$y)) + 1
ya <- floor(min(self$data1$y)) - 1
diff_x <- xb - xa
diff_y <- yb - ya
center_x <- (xb + xa)/2
center_y <- (yb + ya)/2
xa_lim <- center_x - 1/2 * max(diff_x, diff_y)
xb_lim <- center_x + 1/2 * max(diff_x, diff_y)
ya_lim <- center_y - 1/2 * max(diff_x, diff_y)
yb_lim <- center_y + 1/2 * max(diff_x, diff_y)
self$w <- list()
self$w$x <- c(xa_lim, xb_lim)
self$w$y <- c(ya_lim, yb_lim)
self$n_bins <- 7/240 * (xb_lim - xa_lim) * (yb_lim - ya_lim) + 1.47
},
plotDomain = function(resolutionIndex, col1, border1, ...){
self$lims_calc()
if(is.null(dev.list())){
self$p <- NA
}
scale <- (1/self$resolution1[resolutionIndex])
if(length(self$p) == 1){
self$p <- ggplot(self$data1, aes(x, y)) +
scale_x_continuous(limits = self$w$x) +
scale_y_continuous(limits = self$w$y) +
coord_equal()
self$p <- self$p +
geom_hex(bins = self$n_bins * scale, col = border1, fill = col1) +
theme(panel.background = element_blank(), legend.position = "none") +
theme(panel.border = element_rect(color = "black",
fill = NA,
size = 0.5))
}else{
self$p <- self$p + geom_hex(bins = self$n_bins * scale, col = border1, fill = col1)
}
print(self$p)
return(invisible(self))
},
plotPoints = function(cex, ...){
self$lims_calc()
if(is.null(dev.list())){
self$p <- NA
}
if(length(self$p) == 1){
self$p <- ggplot(self$data1, aes(x, y)) +
scale_x_continuous(limits = self$w$x) +
scale_y_continuous(limits = self$w$y) +
coord_equal()
self$p <- self$p +
geom_point(alpha = cex, ...)  +
theme(panel.background = element_blank(), legend.position = "none") +
theme(panel.border = element_rect(color = "black",
fill = NA,
size = 0.5))
}else{
self$p <- self$p + geom_point(...)
}
print(self$p)
return(invisible(self))
}
)
)
lighter <- function(color, percentLighter = 50) {
r <- strtoi(paste0("0x", substr(color, 2, 3))) / 255
g <- strtoi(paste0("0x", substr(color, 4, 5))) / 255
b <- strtoi(paste0("0x", substr(color, 6, 7))) / 255
a <- strtoi(paste0("0x", substr(color, 8, 9))) / 255
a <- a * percentLighter / 100
rgb(r, g, b, a)
}
test_data_00 <- read_csv("C:/Users/kacpe/Desktop/Adv R/1st project/test_data_00.csv")
data1 <- test_data_00
a <- domain$new(data1 = data1, resolution1 = c(0.5, 0.7, 1))
a$plotDomain(resolutionIndex = 3, border = rgb(188/255, 156/255, 254/255, .5), col = rgb(188/255, 156/255, 254/255, .4))
a$plotDomain(resolutionIndex = 2, border = NA, col = rgb(0, 0, 1, .1))
a$plotDomain(resolutionIndex = 1, border = rgb(217/255, 251/255, 0, .5), col = rgb(217/255, 251/255, 0, .4))
a$plotPoints(pch = 20, col = "cyan", cex = 0.5)
rm(list = ls())
a$plotDomain(resolutionIndex = 3, border = rgb(188/255, 156/255, 254/255, .5), col = rgb(188/255, 156/255, 254/255, .4))
a <- domain$new(data1 = data1, resolution1 = c(0.5, 0.7, 1))
library(R6)
library(ggplot2)
library(readr)
domain <- R6Class(classname = "Domain",
public = list(
data1 = NA,
resolution1 = NA,
p = NA,
nbins = NA,
w = NA,
n_bins = NA,
initialize = function(data1, resolution1){
self$data1 <- data1
self$resolution1 <- resolution1
},
lims_calc = function(){
xb <- ceiling(max(self$data1$x)) + 1
xa <- floor(min(self$data1$x)) - 1
yb <- ceiling(max(self$data1$y)) + 1
ya <- floor(min(self$data1$y)) - 1
diff_x <- xb - xa
diff_y <- yb - ya
center_x <- (xb + xa)/2
center_y <- (yb + ya)/2
xa_lim <- center_x - 1/2 * max(diff_x, diff_y)
xb_lim <- center_x + 1/2 * max(diff_x, diff_y)
ya_lim <- center_y - 1/2 * max(diff_x, diff_y)
yb_lim <- center_y + 1/2 * max(diff_x, diff_y)
self$w <- list()
self$w$x <- c(xa_lim, xb_lim)
self$w$y <- c(ya_lim, yb_lim)
self$n_bins <- 7/240 * (xb_lim - xa_lim) * (yb_lim - ya_lim) + 1.47
},
plotDomain = function(resolutionIndex, col1, border1, ...){
self$lims_calc()
if(is.null(dev.list())){
self$p <- NA
}
scale <- (1/self$resolution1[resolutionIndex])
if(length(self$p) == 1){
self$p <- ggplot(self$data1, aes(x, y)) +
scale_x_continuous(limits = self$w$x) +
scale_y_continuous(limits = self$w$y) +
coord_equal()
self$p <- self$p +
geom_hex(bins = self$n_bins * scale, col = border1, fill = col1) +
theme(panel.background = element_blank(), legend.position = "none") +
theme(panel.border = element_rect(color = "black",
fill = NA,
size = 0.5))
}else{
self$p <- self$p + geom_hex(bins = self$n_bins * scale, col = border1, fill = col1)
}
print(self$p)
return(invisible(self))
},
plotPoints = function(cex, ...){
self$lims_calc()
if(is.null(dev.list())){
self$p <- NA
}
if(length(self$p) == 1){
self$p <- ggplot(self$data1, aes(x, y)) +
scale_x_continuous(limits = self$w$x) +
scale_y_continuous(limits = self$w$y) +
coord_equal()
self$p <- self$p +
geom_point(alpha = cex, ...)  +
theme(panel.background = element_blank(), legend.position = "none") +
theme(panel.border = element_rect(color = "black",
fill = NA,
size = 0.5))
}else{
self$p <- self$p + geom_point(...)
}
print(self$p)
return(invisible(self))
}
)
)
lighter <- function(color, percentLighter = 50) {
r <- strtoi(paste0("0x", substr(color, 2, 3))) / 255
g <- strtoi(paste0("0x", substr(color, 4, 5))) / 255
b <- strtoi(paste0("0x", substr(color, 6, 7))) / 255
a <- strtoi(paste0("0x", substr(color, 8, 9))) / 255
a <- a * percentLighter / 100
rgb(r, g, b, a)
}
test_data_00 <- read_csv("C:/Users/kacpe/Desktop/Adv R/1st project/test_data_00.csv")
data1 <- test_data_00
a <- domain$new(data1 = data1, resolution1 = c(0.5, 0.7, 1))
a$plotPoints(pch = 20, col = "cyan", cex = 0.5)
a$plotDomain(resolutionIndex = 1, border = rgb(217/255, 251/255, 0, .5), col = rgb(217/255, 251/255, 0, .4))
a$plotDomain(resolutionIndex = 2, border = NA, col = rgb(0, 0, 1, .1))
a$plotDomain(resolutionIndex = 3, border = rgb(188/255, 156/255, 254/255, .5), col = rgb(188/255, 156/255, 254/255, .4))
graphics.off()
a$plotPoints(pch = 20, cex = .5, col = "red")$
plotDomain(resolutionIndex = 3, border = rgb(0, 1, 1, .3), col = rgb(0, 1, 1, .1))$
plotDomain(resolutionIndex = 2, border = rgb(1, 0, 1, .3), col = rgb(1, 0, 1, .1))$
plotDomain(resolutionIndex = 1, border = rgb(0, 1, 1, .5), col = rgb(0, 1, 1, .3))
d <- read.csv(file = "C:/Users/kacpe/Desktop/Adv R/1st project/test_data_01.csv")
data1 <- d
a <- domain$new(data1 = data1, resolution = c(0.3, 0.5, 1))
### Colors
col1 <- rgb(1, 0, 0, .4)
col2 <- rgb(1, 0, 1, .4)
col3 <- rgb(0, 0, 1, .4)
col4 <- "#FFF300"
### Closing all graphical devices
graphics.off()
a$plotPoints(pch = 20, cex = 0.5, col = col4)
a$plotDomain(resolutionIndex = 1, col = col1, border = NA)
a$plotDomain(resolutionIndex = 2, col = lighter(col2, 50), border = col2)
### Creating a graph
a$plotDomain(resolutionIndex = 3, col = lighter(col1, 10), border = col1)
graphics.off()
a$plotDomain(resolutionIndex = 3, border = col1, col = lighter(col1, 10))$
plotDomain(resolutionIndex = 2, border = col2, col = lighter(col2, 50))$
plotDomain(resolutionIndex = 1, border = NA, col = col1)$
plotPoints(pch = 20, cex = .5, col = col4)
x <- c(1,2)
length(x)
x
)x
x
d <- read.csv(file = "C:/Users/kacpe/Desktop/Adv R/1st project/test_data_02.csv")
### Creating an object
a <- domain$new(data = d, resolution = c(0.1, 0.3, 1))
### Colors
col1 <- rgb(0, 1, 1, .4)
col2 <- rgb(1, 0, 1, .4)
col3 <- rgb(0, 0, 1, .4)
col4 <- rgb(0, 0, 1, 1)
### Closing all graphical devices
graphics.off()
### Creating a graph
a$plotDomain(resolutionIndex = 3, col = lighter(col1, 10), border = col1)
a$plotDomain(resolutionIndex = 2, col = lighter(col2, 50), border = col2)
a$plotDomain(resolutionIndex = 1, col = lighter(col3, 50), border = lighter(col3, 20))
a$plotPoints(pch = 20, size = 0.5, col = col4)
rm(list = ls())
library(stringr)
library(pryr)
library(nloptr)
findMinimum <- function(startingPoint, targetFunction, constraints, vars, ...){
# Function that transforms mathematical language into formulas interpretable by R
transForm <- function(Form, Vars){ # Form and Vars are passed as a quote
form <- deparse(Form)
length_str <- c()
for(i in 2:length(Vars)){
length_str <- c(length_str, str_count(form, deparse(Vars[[i]])))
}
n_i <- max(length_str)
for(k in 1:n_i){
for(m in 1:(length(Vars)-1)){
form <- sub(deparse(Vars[[m + 1]]), paste("x[", m, "]", sep = ""), form)
}
}
return(form)
}
# Function that splits constraints concatenated by &
ConstrSplit <- function(x){ # x passed as a Quote
if(!grepl("&", deparse(x))){
return(c(x))
}else{
z <- strsplit(deparse(x), split = " & ")[[1]]
}
#### Returns vector of strings
}
# Function that transforms constraints into form interpretable by nloptr package
ReformConstr <- function(X){ # x passed as a vector
NewConstr <- vector(mode = "character", length = length(X))
for(n in 1:length(X)){
if(grepl("<=", X[n])){
NewConstr[n] <- paste(deparse(parse(text = X[n])[[1]][[2]]), " - (", deparse(parse(text = X[n])[[1]][[3]]), ")", sep = "")
}else{
NewConstr[n] <- paste(deparse(parse(text = X[n])[[1]][[3]]), " - (", deparse(parse(text = X[n])[[1]][[2]]), ")", sep = "")
}
}
return(NewConstr) # Returns a vector
}
# Function that transforms vector of strings into a list of expressions
MakingConstrFun <- function(VecOfChar, vars){
B <- list()
for(k in 1:length(VecOfChar)){
B <- append(B, parse(text = VecOfChar[[k]])[[1]])
}
return(B) ### Spits out list of expressions of constraints
}
# Function that returns a function handling constraints
fun_creat <- function(b){ #b is a list of expressions
emp <- c()
zwrot <- function(x){}
vector_zwrot <- "return(c("
for(i in 1:length(b)){ # b contains constraints of type language
body(zwrot)[[i+1]] <- parse(text = paste("g", i, " <- ", deparse(b[[i]]), sep = ""))[[1]]
if(i == length(b)){
vector_zwrot <- paste(vector_zwrot, "g", i, sep = "")
}else{
vector_zwrot <- paste(vector_zwrot, "g", i, ", ", sep = "")
}
}
vector_zwrot <- paste(vector_zwrot, "))")
body(zwrot)[[length(b)+2]] <- parse(text = vector_zwrot)[[1]]
return(zwrot) #returns a function, which returns vector of constraints
}
### Capturing expressions of target function, variables and constraints
targetFunctionUneval <- substitute(targetFunction)
varsUneval <- substitute(vars)
constraintsUneval <- substitute(constraints)
### transforming constraints and target function into form readable by nloptr
VecOfConstrExp <- MakingConstrFun(
ReformConstr(
ConstrSplit(
parse(text = transForm(constraintsUneval,
varsUneval))[[1]])))
obj_form <- transForm(targetFunctionUneval, varsUneval)
# Performing optimization with nloptr package
res_test <- nloptr( x0 = startingPoint,
eval_f = make_function(alist(x = ), parse(text = obj_form)[[1]]),
eval_g_ineq = fun_creat(VecOfConstrExp),
opts = list("algorithm" = "NLOPT_LN_COBYLA",
"xtol_rel" = 1e-8,
"maxeval" = 1e4))
# Creating list that stores optimization results
e <- list()
e$optimalPoint <- res_test$solution
e$optimalValue <- res_test$objective
return(e)
}
findMinimum <- function(startingPoint, targetFunction, constraints, vars, ...){
# Function that transforms mathematical language into formulas interpretable by R
transForm <- function(Form, Vars){ # Form and Vars are passed as a quote
form <- deparse(Form)
length_str <- c()
for(i in 2:length(Vars)){
length_str <- c(length_str, str_count(form, deparse(Vars[[i]])))
}
n_i <- max(length_str)
for(k in 1:n_i){
for(m in 1:(length(Vars)-1)){
form <- sub(deparse(Vars[[m + 1]]), paste("x[", m, "]", sep = ""), form)
}
}
return(form)
}
# Function that splits constraints concatenated by &
ConstrSplit <- function(x){ # x passed as a Quote
if(!grepl("&", deparse(x))){
return(c(x))
}else{
z <- strsplit(deparse(x), split = " & ")[[1]]
}
#### Returns vector of strings
}
# Function that transforms constraints into form interpretable by nloptr package
ReformConstr <- function(X){ # x passed as a vector
NewConstr <- vector(mode = "character", length = length(X))
for(n in 1:length(X)){
if(grepl("<=", X[n])){
NewConstr[n] <- paste(deparse(parse(text = X[n])[[1]][[2]]), " - (", deparse(parse(text = X[n])[[1]][[3]]), ")", sep = "")
}else{
NewConstr[n] <- paste(deparse(parse(text = X[n])[[1]][[3]]), " - (", deparse(parse(text = X[n])[[1]][[2]]), ")", sep = "")
}
}
return(NewConstr) # Returns a vector
}
# Function that transforms vector of strings into a list of expressions
MakingConstrFun <- function(VecOfChar, vars){
B <- list()
for(k in 1:length(VecOfChar)){
B <- append(B, parse(text = VecOfChar[[k]])[[1]])
}
return(B) ### Spits out list of expressions of constraints
}
# Function that returns a function handling constraints
fun_creat <- function(b){ #b is a list of expressions
emp <- c()
zwrot <- function(x){}
vector_zwrot <- "return(c("
for(i in 1:length(b)){ # b contains constraints of type language
body(zwrot)[[i+1]] <- parse(text = paste("g", i, " <- ", deparse(b[[i]]), sep = ""))[[1]]
if(i == length(b)){
vector_zwrot <- paste(vector_zwrot, "g", i, sep = "")
}else{
vector_zwrot <- paste(vector_zwrot, "g", i, ", ", sep = "")
}
}
vector_zwrot <- paste(vector_zwrot, "))")
body(zwrot)[[length(b)+2]] <- parse(text = vector_zwrot)[[1]]
return(zwrot) #returns a function, which returns vector of constraints
}
### Capturing expressions of target function, variables and constraints
targetFunctionUneval <- substitute(targetFunction)
varsUneval <- substitute(vars)
constraintsUneval <- substitute(constraints)
### transforming constraints and target function into form readable by nloptr
VecOfConstrExp <- MakingConstrFun(
ReformConstr(
ConstrSplit(
parse(text = transForm(constraintsUneval,
varsUneval))[[1]])))
obj_form <- transForm(targetFunctionUneval, varsUneval)
# Performing optimization with nloptr package
res_test <- nloptr( x0 = startingPoint,
eval_f = make_function(alist(x = ), parse(text = obj_form)[[1]]),
eval_g_ineq = fun_creat(VecOfConstrExp),
opts = list("algorithm" = "NLOPT_LN_COBYLA",
"xtol_rel" = 1e-8,
"maxeval" = 1e4))
# Creating list that stores optimization results
e <- list()
e$optimalPoint <- res_test$solution
e$optimalValue <- res_test$objective
return(e)
}
w <- findMinimum(
startingPoint = c(5, 7),
targetFunction = x + y,
constraints = x >= 0 & y >= 0,
vars = c(x, y)
)
w
